// Place your key bindings in this file to override the defaultsauto[]
[
    {
        "key": "ctrl+c",
        "command": "-extension.vim_ctrl+c",
        "when": "editorTextFocus && vim.active && vim.overrideCtrlC && vim.use<C-c> && !inDebugRepl"
    },
    {
        "key": "ctrl+v",
        "command": "-extension.vim_ctrl+v",
        "when": "editorTextFocus && vim.active && vim.use<C-v> && !inDebugRepl"
    },
    {
        "key": "ctrl+x",
        "command": "-extension.vim_ctrl+x",
        "when": "editorTextFocus && vim.active && vim.use<C-x> && !inDebugRepl"
    },
    {
        "key": "ctrl+z",
        "command": "-extension.vim_ctrl+z",
        "when": "editorTextFocus && vim.active && vim.use<C-z> && !inDebugRepl"
    },
    {
        "key": "ctrl+y",
        "command": "-extension.vim_ctrl+y",
        "when": "editorTextFocus && vim.active && vim.use<C-y> && !inDebugRepl"
    },
    {
        "key": "ctrl+j",
        "command": "editor.action.scrollDownHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "down",
        "command": "-editor.action.scrollDownHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "ctrl+j",
        "command": "breadcrumbs.selectFocused",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "down",
        "command": "-breadcrumbs.selectFocused",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "ctrl+j",
        "command": "inlineChat.nextFromHistory",
        "when": "inlineChatFocused && inlineChatHasProvider && inlineChatInnerCursorEnd"
    },
    {
        "key": "down",
        "command": "-inlineChat.nextFromHistory",
        "when": "inlineChatFocused && inlineChatHasProvider && inlineChatInnerCursorEnd"
    },
    {
        "key": "down",
        "command": "-inlineChat.nextFromHistory",
        "when": "inlineChatFocused && inlineChatHasProvider && inlineChatInnerCursorEnd"
    },
    {
        "key": "enter",
        "command": "keybindings.editor.addKeybinding",
        "when": "inlineChatFocused && inlineChatHasProvider && inlineChatInnerCursorEnd"
    },
    {
        "key": "ctrl+enter",
        "command": "keybindings.editor.defineKeybinding",
        "when": "inKeybindings && keybindingFocus && !whenFocus"
    },
    {
        "key": "j",
        "command": "editor.action.selectNextStickyScrollLine",
        "when": "stickyScrollFocused"
    },
    {
        "key": "down",
        "command": "-editor.action.selectNextStickyScrollLine",
        "when": "stickyScrollFocused"
    },
    {
        "key": "j",
        "command": "notebook.focusNextEditor",
        "when": "config.notebook.navigation.allowNavigateToSurroundingCells && editorTextFocus && inputFocus && notebookEditorFocused && !accessibilityModeEnabled && !isEmbeddedDiffEditor && notebookEditorCursorAtBoundary != 'none' && notebookEditorCursorAtBoundary != 'top'"
    },
    {
        "key": "ctrl+j",
        "command": "list.focusDown",
        "when": "listFocus || listHasSelectionOrFocus"
    },
{ "key": "ctrl+j",             "command": "search.focus.nextInputBox",
                                     "when": "inSearchEditor && inputBoxFocus || inputBoxFocus && searchViewletVisible" },
{ "key": "ctrl+j",                  "command": "settings.action.focusSettingsFromSearch",
                                     "when": "inSettingsSearch && !suggestWidgetVisible" },

{ "key": "ctrl+j",                  "command": "editor.action.selectNextStickyScrollLine",
                                     "when": "stickyScrollFocused" },
{ "key": "ctrl+j",                  "command": "editor.action.scrollDownHover",
                                     "when": "editorHoverFocused" },
{ "key": "ctrl+j",                  "command": "breadcrumbs.selectFocused",
                                     "when": "breadcrumbsActive && breadcrumbsVisible" },
{ "key": "ctrl+j",                  "command": "list.focusDown",
                                     "when": "listFocus && !inputFocus && !treestickyScrollFocused" },
    {
        "key": "down",
        "command": "workbench.action.quickOpenSelectNext",
        "when": "inSearchEditor"
    },
    //{
        //"key": "leader b",
        //"command": "workbench.action.terminal.sendSequence",
        //"args": {
        //  "text": "ls\u000D"
      //  }
    //},
    {
        "key": "\\ v d",
        "command": "workbench.action.openDefaultKeybindingsFile",
        "when": "editorTextFocus && vim.active && vim.mode != 'Insert'"
    },
    {
        "key": "ctrl+j",
        "command": "extension.vim_down",
        "when": "editorTextFocus && vim.active && !inDebugRepl && !parameterHintsVisible && !suggestWidgetVisible"
    },
    {
        "key": "ctrl+j",
        "command": "-workbench.action.togglePanel"
    },
    //{
    //    "key": "space a",
    //    "command": "workbench.action.openDefaultKeybindingsFile",
    //    "when": "editorTextFocus && vim.active && vim.mode != 'Insert'"
    //},
//activeEditor == 'workbench.editor.extension'
    {
        "key": "space b",
        "command": "workbench.action.terminal.sendSequence",
        "args": {
        "text": "ls\u000D"
        },
        "when": "editorTextFocus && vim.active && vim.mode != 'Insert'"
    },
    {
        //"key": "space p",

    },
    {
        "key": "ctrl+n",
        "command": "github.copilot.nextPanelSolution",
        "when": "github.copilot.activated && github.copilot.panelVisible"
    },
    {
        "key": "alt+oem_6",
        "command": "-github.copilot.nextPanelSolution",
        "when": "github.copilot.activated && github.copilot.panelVisible"
    },
    {
        "key": "ctrl+shift+n",
        "command": "github.copilot.previousPanelSolution",
        "when": "github.copilot.activated && github.copilot.panelVisible"
    },
    {
        "key": "alt+oem_4",
        "command": "-github.copilot.previousPanelSolution",
        "when": "github.copilot.activated && github.copilot.panelVisible"
    },
    {
        "key": "ctrl+n",
        "command": "-workbench.action.files.newUntitledFile"
    }
]